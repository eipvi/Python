"""
PEP8 é um guia de estilo para escrita de código em Python. Ele é um documento que contém uma série de recomendações e diretrizes para tornar o código Python mais legível e consistente.

O PEP8 inclui recomendações sobre a formatação do código, como a utilização de espaços em branco, indentação, nomeação de variáveis e funções, entre outros. Ele também sugere práticas para tornar o código mais legível, como a limitação do comprimento das linhas de código e a utilização de comentários.

O objetivo do PEP8 é tornar o código Python mais fácil de entender e manter, tanto para o programador que o escreve quanto para outros que possam trabalhar nele posteriormente. Ao seguir as diretrizes do PEP8, o código se torna mais legível e consistente, o que ajuda a evitar erros e facilita a colaboração em projetos de programação.

A comunidade Python considera o PEP8 uma recomendação importante e muitas vezes requer que os projetos sigam suas diretrizes.

1.Abra terminal
2.Digite python3.8 (python instalado) para abrir o console do python
3.Assim que o console estiver aberto insira: import this
4.Printado um poema:

The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

pep 8-style guid for python code

-

A ideia da PEP8 é que possamos escrever códigos python de forma Pythônica.

  1.Ultilizar Camel Case para nomes de classes;

class Calculado:
    pass

class CalculadoraCientifica:
    pass


 2.Utilize nomes em minúsculo, separados por underline para funções ou variaveis

def soma():
    pass

def soma_dois():
    pass

numero 4
numero_impar=5

3.Utilize 4 espaços para identação!(NÃO usar tab)

if 'a' in 'banana':
    print('tem')


4.Linhas em branco

-Separar funções e definições de classe com duas linhas em branco;




Class Classe:
    pass


Class Outra:
    pass

-Método dentro de uma classe devem ser separados com uma única linha em branco

5.Imports

-Imports devem ser sempre feitos em linha separadas;

#Errado

import sys, os

#CERTO

# Não a problema em utilizar

from types import stringType, ListType

# Caso tenha muitos imports de um mesmo pacote, recomenda-se fazer:

from types import {
    stringType,
    ListType,
    SetType,
    OutroType
}

#Import devem ser colocados no topo do arquivo, logo depois de quaisquer comentários ou descstrings.
#Antes de constantes ou variaveis globais.

#6.Espaços em expressões e instruções

#Não faça:
funcao( algo[ 1 ]), { outro: 2})
algo (1)
dict ['chave'] = list [indice]

#Faça
funcao (algo[1], {outro:2})
algo(1)
dict['chave'] = lista[indice]
"""
